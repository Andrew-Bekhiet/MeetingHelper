rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function historyRecordFields(){
      return ['ID','Time','RecordedBy','Notes','ClassId','Services','IsServant', 'StudyYear'].toSet();
    }

    function classFields(){
      return ['Name','StudyYear','Gender','HasPhoto','Color','LastEdit','LastEditTime','Allowed'].toSet();
    }

    function personFields(){
      return ['ClassId','Name','Phone','FatherPhone','MotherPhone','Phones','Address','HasPhoto',
            'Color','BirthDate','BirthDay','Last','ExamScores','LastTanawol','LastConfession','LastKodas',
            'LastMeeting','LastCall','LastVisit','LastEdit','LastEditTime','Notes','School','Church','CFather',
            'Location','IsShammas','Gender','ShammasLevel','StudyYear','College','Services'
          ].toSet();
    }

    function checkUserRegistered() {
      return request.auth.uid != null
        && request.auth.token.approved
        && (
          request.auth.token.lastTanawol == null
          || request.auth.token.lastConfession == null
          || (
            (request.auth.token.lastTanawol + 5184000000) > request.time.toMillis()
            && (request.auth.token.lastConfession + 5184000000) > request.time.toMillis()
          )
        );
    }

    function checkCanReadUser(user){
      return checkUserRegistered()
        && (
          request.auth.token.manageUsers
          || request.auth.token.secretary
          || (
            request.auth.token.manageAllowedUsers
            && request.auth.uid in get(/databases/$(database)/documents/UsersData/$(user)).data.AllowedUsers
          )
        );
    }

    match /Classes{
      allow list: if checkUserRegistered()
        && request.auth.token.superAccess;

      match /null {
        allow read: if checkUserRegistered();
      }

      match /{class} {
        function canAccessClass() {
          return request.auth.token.superAccess
            || request.auth.uid in resource.data.Allowed;
        }

        allow read: if checkUserRegistered()
          && canAccessClass();
        
        allow delete: if checkUserRegistered()
          && canAccessClass()
          && request.auth.token.write;
        
        allow update: if checkUserRegistered()
          && canAccessClass()
          && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['Allowed'])
            || request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
          )
          && request.auth.token.write
          && classFields().hasAll(request.resource.data.diff(resource.data).affectedKeys());

        allow create: if checkUserRegistered()
          && ([request.auth.uid].hasAll(request.resource.data.Allowed)
            || request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
          )
          && request.auth.token.write
          && classFields().hasAll(request.resource.data.keys().toSet());

        match /{history=**} {
          allow read: if checkUserRegistered()
            && (request.auth.token.superAccess
              || request.auth.uid in (get(/databases/$(database)/documents/Classes/$(class))).data.Allowed
            );
        }
      }
    }

    match /Persons {
      match /null {
        allow read: if checkUserRegistered();
      }

      match /{person} {

        function canAccessPerson(resource) {
          return request.auth.token.superAccess
            || (!resource.data.keys().hasAny(['ClassId'])
                ? false
                : request.auth.uid in get(resource.data.ClassId).data.Allowed
            )
            || (!resource.data.keys().hasAny(['Services'])
                ? false
                : resource.data.Services
                    .hasAny(get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                    .data
                    .AdminServices)
            );
        }

        allow read: if checkUserRegistered()
          && canAccessPerson(resource);

        allow delete: if checkUserRegistered()
          && canAccessPerson(resource)
          && request.auth.token.write;

        allow update: if checkUserRegistered()
          && canAccessPerson(resource)
          && request.auth.token.write
          && personFields().hasAll(request.resource.data.diff(resource.data).affectedKeys())
          && (request.auth.token.superAccess
            || ((!request.resource.data.keys().hasAny(['ClassId'])
                || request.resource.data.ClassId == null
              )
              && get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                .data
                .AdminServices.toSet()
                .hasAll(request.resource.data.Services.toSet()
                  .union(resource.data.Services.toSet())
                  .difference(request.resource.data.Services.toSet()
                    .intersection(resource.data.Services.toSet())
                  )
                )
              )
            || request.auth.uid in get(request.resource.data.ClassId).data.Allowed);

        allow create: if checkUserRegistered()
          && personFields().hasAll(request.resource.data.keys().toSet())
          && request.auth.token.write
          && (request.auth.token.superAccess
            || ((!request.resource.data.keys().hasAny(['ClassId'])
                || request.resource.data.ClassId == null
              )
              && get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                .data
                .AdminServices
                .hasAll(request.resource.data.Services)
              )
            || request.auth.uid in get(request.resource.data.ClassId).data.Allowed
          );

        match /{history=**} {
          allow read: if checkUserRegistered()
            && canAccessPerson(get(/databases/$(database)/documents/Persons/$(person)));
        }
      }
    }

    match /Invitations {
      allow list: if checkUserRegistered()
        && (request.auth.token.manageUsers
          || request.auth.token.manageAllowedUsers
        );

      match /{invitation} {
        function invitationFields(){
          return ['Title','UsedBy','GeneratedBy','Permissions','GeneratedOn','ExpiryDate'].toSet();
        }

        function personIdChecks(doc){
          return doc.data != null
            && (!doc.data.keys().hasAny(['UID'])
              || doc.data.UID == null);
        }

        allow read: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
          );

        allow create: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers)
          && invitationFields().hasAll(request.resource.data.keys().toSet())
          && request.resource.data.GeneratedBy == request.auth.uid
          && request.resource.data.GeneratedOn.toMillis() == request.time.toMillis()
          && (!request.resource.data.keys().hasAny(['Permissions'])
            ? true
            : (!request.resource.data.Permissions.keys().hasAny(['personId'])
              ? true
              : personIdChecks(get(path('/databases/'+database+'/documents/UsersData/'+request.resource.data.Permissions.personId)))
            )
          );

        allow update: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers)
          && resource.data.GeneratedBy == request.auth.uid
          && invitationFields().hasAll(request.resource.data.diff(resource.data).affectedKeys());
          
        allow delete: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers)
          && resource.data.GeneratedBy == request.auth.uid;
      }
    }

    match /{path=**}/{parent}/{doc} {
      allow read: if checkUserRegistered()
        && (parent == 'Meeting'
          || parent == 'Kodas'
          || parent == 'Confession'
          || parent == 'EditHistory'
          || parent == 'VisitHistory'
          || parent == 'CallHistory'
          || parent == 'ConfessionHistory'
          || exists(/databases/$(database)/documents/Services/$(parent))
        )
        && (request.auth.token.superAccess
          || (resource.data.keys().hasAny(['ClassId'])
            && request.auth.uid in get(resource.data.ClassId).data.Allowed)
          || (resource.data.keys().hasAny(['Services'])
            && resource.data.Services
              .hasAny(get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                .data.AdminServices)
          )
        );
    }

    match /UsersData {
      function checkCanEditUser(){
        return checkUserRegistered()
          && (request.auth.token.manageUsers
            || (request.auth.token.manageAllowedUsers
              && request.auth.uid in resource.data.AllowedUsers
            )
          )
          && (request.auth.token.superAccess
            || !request.resource.keys().hasAny(['ClassId'])
            || request.resource.data.ClassId == null
            || request.auth.uid in get(request.resource.data.ClassId).data.Allowed
            || resource.data.ClassId == request.resource.data.ClassId
          );
      }

      function checkCanCreateUser(){
        return checkUserRegistered()
          && (request.auth.token.manageUsers
            || (request.auth.token.manageAllowedUsers
              && request.auth.uid in request.resource.data.AllowedUsers
            )
          )
          && (request.auth.token.superAccess
            || request.resource.data.ClassId == null
            || request.auth.uid in get(request.resource.data.ClassId).data.Allowed
          );
      }

      allow list: if checkUserRegistered()
        && request.auth.token.manageUsers;

      match /null {
        allow read: if checkUserRegistered();
      }

      match /{user} {
        allow read: if request.auth.uid != null
          && (user == request.auth.token.personId
            || (checkCanReadUser(user)
              && request.auth.token.approved
            )
          );

        allow create: if checkCanCreateUser()
          && !request.resource.data.keys().hasAny(['Permissions', 'UID', 'Email'])
          && personFields().union(['AdminServices','AllowedUsers'].toSet()).hasAll(request.resource.data.keys().toSet());

        allow update: if checkUserRegistered()
          && (user == request.auth.token.personId
            || checkCanEditUser()
          )
          && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['Permissions', 'UID', 'Email'])
          && personFields().union(['AdminServices', 'AllowedUsers'].toSet()).hasAll(request.resource.data.diff(resource.data).affectedKeys());

        allow delete: if checkCanEditUser()
          && !resource.data.keys().hasAny(['UID']);

        match /{history=**} {
          allow read: if checkUserRegistered()
            && (user == request.auth.token.personId
              || checkCanReadUser(user)
            );
        }
      }
    }

    match /Deleted {
      allow list: if checkUserRegistered()
        && request.auth.token.manageDeleted == true;

      match /{date} {
        allow read: if checkUserRegistered()
          && request.auth.token.manageDeleted == true;
        
        match /Classes {
          allow list: if checkUserRegistered()
            && request.auth.token.superAccess
            && request.auth.token.manageDeleted == true;
          
          match /{class}{  
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && (request.auth.token.superAccess
                || request.auth.uid in resource.data.Allowed);
            
            match /{history=**} {
              allow read: if checkUserRegistered()
                && (request.auth.token.superAccess
                  || request.auth.uid in (get(/databases/$(database)/documents/Deleted/$(date)/Classes/$(class))).data.Allowed);
            }
          }
        }

        match /Services {
          allow list: if checkUserRegistered()
            && request.auth.token.superAccess
            && request.auth.token.manageDeleted == true;
          
          match /{_service}{  
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && request.auth.token.superAccess;
          }
        }

        match /Persons {
          allow list: if checkUserRegistered()
            && request.auth.token.superAccess
            && request.auth.token.manageDeleted == true;
          
          match /{person}{
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && (request.auth.token.superAccess
                || request.auth.uid in get(resource.data.ClassId).data.Allowed
              );
            
            match /{history=**} {
              allow read: if checkUserRegistered()
                && (request.auth.token.superAccess
                  || request.auth.uid in get(get(/databases/$(database)/documents/Deleted/$(date)/Persons/$(person)).data.ClassId).data.Allowed
                );
            }
          }
        }
      }
    }

    match /History {
      allow list: if checkUserRegistered();

      match /{historyDay} {
        allow read: if checkUserRegistered();

        allow delete: if checkUserRegistered()
          && request.auth.token.superAccess
          && request.auth.token.write;
        
        allow create: if checkUserRegistered()
          && debug(request.resource.data.Day.toMillis() % 86400000 == 0)
          && debug(request.resource.data.Day.date().toMillis() == request.time.date().toMillis())
          && debug(historyDay) == string(request.resource.data.Day.year()) + '-' + (request.resource.data.Day.month() > 9 ? '' : '0') + string(request.resource.data.Day.month()) + '-' + (request.resource.data.Day.day() > 9 ? '' : '0') + string(request.resource.data.Day.day())
          && request.auth.token.recordHistory;
        
        allow update: if checkUserRegistered()
          && resource.data.Day.date().toMillis() == request.time.date().toMillis()
          && (!request.resource.data.keys().hasAny(['Day']) || request.resource.data.Day == resource.data.Day)
          && request.auth.token.recordHistory;
        
        match /{section} {

          match /{record} {
            function canAccessRecord() {
              return request.auth.token.superAccess
                || (section == 'Meeting' || section == 'Kodas' || section == 'Confession'
                    ? request.auth.uid in get(resource.data.ClassId).data.Allowed
                    : /databases/$(database)/documents/Services/$(section)
                      in get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                        .data
                        .AdminServices
                );
            }

            allow read: if checkUserRegistered()
              && (section == 'Meeting'
                || section == 'Kodas'
                || section == 'Confession'
                || exists(/databases/$(database)/documents/Services/$(section))
              )
              && canAccessRecord();
            
            allow delete: if checkUserRegistered()
              && request.auth.token.recordHistory
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || get(/databases/$(database)/documents/History/$(historyDay)).data.Day.date().toMillis() == request.time.date().toMillis()
              )
              && canAccessRecord();
            
            allow update, create: if checkUserRegistered()
              && request.auth.token.recordHistory
              && exists(/databases/$(database)/documents/History/$(historyDay))
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || get(/databases/$(database)/documents/History/$(historyDay)).data.Day.date().toMillis() == request.time.date().toMillis()
              )
              && historyRecordFields().hasAll(request.resource.data.diff(request.method == 'create' ? {} : resource.data).affectedKeys())
              && request.resource.data.ID == request.resource.id
              && request.resource.data.RecordedBy == request.auth.uid
              && (request.method == 'update'
                ? (section == 'Meeting' || section == 'Kodas' || section == 'Confession'
                  ? !request.resource.data.diff(resource.data).affectedKeys().hasAny(['ClassId'])
                    || request.resource.data.ClassId == resource.data.ClassId
                  : (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['Services'])
                      || request.resource.data.Services == resource.data.Services)
                    && request.resource.data.Services
                      .hasOnly([/databases/$(database)/documents/Services/$(section)])
                )
                : true
              )
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || request.resource.data.Time.date().toMillis() == request.time.date().toMillis()
              )
              && (section == 'Meeting' || section == 'Kodas' || section == 'Confession'
                ? (request.auth.token.superAccess
                    || ((request.method == 'create'
                      ? true
                      : request.auth.uid in get(resource.data.ClassId).data.Allowed
                    )
                    && request.auth.uid in get(request.resource.data.ClassId).data.Allowed)
                )
                : (request.auth.token.superAccess
                    || ((request.method == 'create'
                      ? true
                      : resource.data.Services
                          .hasAny(get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                            .data.AdminServices))
                        && request.resource.data.Services
                          .hasAny(get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId))
                            .data.AdminServices)
                      )
                )
              )
              && (section == 'Meeting' || section == 'Kodas' || section == 'Confession'
                ? get(/databases/$(database)/documents/Persons/$(request.resource.data.ID)).data.ClassId
                    == request.resource.data.ClassId
                : get(/databases/$(database)/documents/Persons/$(request.resource.data.ID)).data.Services
                    .hasAll(request.resource.data.Services)
              );
          }
        }
      }
    }

    match /ServantsHistory {
      allow list: if checkUserRegistered()
        && request.auth.token.secretary;

      match /{historyDay} {
        allow read: if checkUserRegistered()
          && request.auth.token.secretary;

        allow delete: if checkUserRegistered()
          && request.auth.token.superAccess
          && request.auth.token.secretary
          && request.auth.token.write;
        
        allow create: if checkUserRegistered()
          && request.auth.token.secretary
          && (request.resource.data.Day.toMillis() % 86400000 == 0)
          && request.resource.data.Day.date().toMillis() == request.time.date().toMillis()
          && historyDay == string(request.resource.data.Day.year()) + '-' + (request.resource.data.Day.month() > 9 ? '' : '0') + string(request.resource.data.Day.month()) + '-' + (request.resource.data.Day.day() > 9 ? '' : '0') + string(request.resource.data.Day.day());
        
        allow update: if checkUserRegistered()
          && request.auth.token.secretary
          && resource.data.Day.date().toMillis() == request.time.date().toMillis()
          && (!request.resource.data.keys().hasAny(['Day'])
            || request.resource.data.Day == resource.data.Day);
        
        match /{section} {

          match /{record} {
            function canAccessRecord() {
              return request.auth.token.superAccess
                || request.auth.token.secretary;
            }

            allow read: if checkUserRegistered()
              && (section == 'Meeting'
                || section == 'Kodas'
                || section == 'Confession'
                || exists(/databases/$(database)/documents/Services/$(section))
              )
              && canAccessRecord();
            
            allow delete: if checkUserRegistered()
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || get(/databases/$(database)/documents/History/$(historyDay)).data.Day.date().toMillis() == request.time.date().toMillis()
              )
              && request.auth.token.secretary
              && canAccessRecord();
            
            allow update, create: if (checkUserRegistered() && request.auth.token.secretary)
              && exists(/databases/$(database)/documents/History/$(historyDay))
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || get(/databases/$(database)/documents/History/$(historyDay)).data.Day.date().toMillis() == request.time.date().toMillis()
              )
              && historyRecordFields().hasAll(request.resource.data.diff(request.method == 'create' ? {} : resource.data).affectedKeys())
              && request.resource.data.ID == request.resource.id
              && exists(/databases/$(database)/documents/UsersData/$(request.resource.id))
              && request.resource.data.RecordedBy == request.auth.uid
              && (request.method == 'update'
                ? (section == 'Meeting' || section == 'Kodas' || section == 'Confession'
                  ? !request.resource.data.diff(resource.data).affectedKeys().hasAny(['ClassId'])
                    || request.resource.data.ClassId == resource.data.ClassId
                  : (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['Services'])
                      || request.resource.data.Services == resource.data.Services)
                    && request.resource.data.Services
                      .hasOnly([/databases/$(database)/documents/Services/$(section)])
                )
                : true
              )
              && ((request.auth.token.keys().hasAny(['changeHistory'])
                  && request.auth.token.changeHistory
                )
                || request.resource.data.Time.date().toMillis() == request.time.date().toMillis()
              );
          }
        }
      }
    }

    match /Users {
      allow read: if checkUserRegistered();
      
      match /null {
        allow read: if checkUserRegistered();
      }
      
      match /{user} {
        allow write: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
          )
          && ['Name'].hasAll(request.resource.data.keys());
        
        allow read: if checkUserRegistered();
      }
    }

    
    match /Services {
      allow read: if checkUserRegistered();
      
      match /Meeting {
        allow write: if false;
      }

      match /Kodas {
        allow write: if false;
      }

      match /Confession {
        allow write: if false;
      }
      
      match /{_service} {
        allow create: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
          )
          && request.auth.token.write
          && ['Name','StudyYearRange','Validity','ShowInHistory','LastEdit','LastEditTime','HasPhoto', 'Color']
            .toSet().hasAll(request.resource.data.keys())
          && (!request.resource.data.keys().hasAny(['Validity'])
            || request.resource.data.Validity == null
            || (request.resource.data.Validity.keys().hasOnly(['From', 'To'])
              && request.resource.data.Validity.From is timestamp
              && request.resource.data.Validity.To is timestamp
            )
          )
          && (!request.resource.data.keys().hasAny(['StudyYearRange'])
            || request.resource.data.StudyYearRange == null
            || (request.resource.data.StudyYearRange.keys().hasOnly(['From', 'To'])
              && exists(request.resource.data.StudyYearRange.From)
              && exists(request.resource.data.StudyYearRange.To)
            )
          );

        allow update: if checkUserRegistered()
          && request.auth.token.write
          && ['Name','StudyYearRange','Validity','ShowInHistory','LastEdit','LastEditTime','HasPhoto','Color']
            .toSet().hasAll(request.resource.data.diff(resource.data).affectedKeys())
          && (!request.resource.data.keys().hasAny(['Validity'])
            || request.resource.data.Validity == null
            || (request.resource.data.Validity.keys().hasOnly(['From', 'To'])
              && request.resource.data.Validity.From is timestamp
              && request.resource.data.Validity.To is timestamp
            )
          )
          && (!request.resource.data.keys().hasAny(['StudyYearRange'])
            || request.resource.data.StudyYearRange == null
            || (request.resource.data.StudyYearRange.keys().hasOnly(['From', 'To'])
              && exists(request.resource.data.StudyYearRange.From)
              && exists(request.resource.data.StudyYearRange.To)
            )
          )
          && (request.auth.token.manageUsers 
            || request.auth.token.manageAllowedUsers
            || /databases/$(database)/documents/Services/$(_service)
              in get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId)).data.AdminServices
          );

        allow delete: if checkUserRegistered()
          && request.auth.token.write
          && (request.auth.token.manageUsers 
            || request.auth.token.manageAllowedUsers
            || /databases/$(database)/documents/Services/$(_service)
              in get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId)).data.AdminServices
          );
        
        allow read: if checkUserRegistered();

        match /{history=**} {
          allow read: if checkUserRegistered()
            && (request.auth.token.superAccess
              || /databases/$(database)/documents/Services/$(_service)
                in get(/databases/$(database)/documents/UsersData/$(request.auth.token.personId)).data.AdminServices
            );
        }
      }
    }

    match /Exams {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }

    match /Fathers {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
    match /Jobs {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
    match /StudyYears {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
    match /Colleges {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
    match /Schools {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
    match /Churches {
      allow read: if checkUserRegistered();
      allow write: if checkUserRegistered()
        && request.auth.token.write;
      
      match /{item} {
        allow read: if checkUserRegistered();
        allow write: if checkUserRegistered()
          && request.auth.token.write;
      }
    }
  }
}

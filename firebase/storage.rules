rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    function checkUserRegistered() {
      return request.auth.uid != null
        && request.auth.token.approved
        && (
        request.auth.token.lastTanawol == null
          || request.auth.token.lastConfession == null
          || (
            (request.auth.token.lastTanawol + 5184000000) > request.time.toMillis()
              && (request.auth.token.lastConfession + 5184000000) > request.time.toMillis()
            )
        );
    }

    function checkCanReadUser(user){
      return checkUserRegistered()
        && (
      request.auth.token.manageUsers
        || request.auth.token.secretary
        || (
      request.auth.token.manageAllowedUsers
        && request.auth.uid in firestore.get(/databases/(default)/documents/UsersData/$(user)).data.AllowedUsers
      )
      );
    }

    match /ServicesPhotos/{_service} {
      allow create: if checkUserRegistered()
        && (request.auth.token.manageUsers
          || request.auth.token.manageAllowedUsers
        )
        && request.auth.token.write;

      allow update: if checkUserRegistered()
        && request.auth.token.write
        && (request.auth.token.manageUsers 
          || request.auth.token.manageAllowedUsers
          || /databases/(default)/documents/Services/$(_service)
            in firestore.get(/databases/(default)/documents/UsersData/$(request.auth.token.personId)).data.AdminServices
        );

      allow delete: if checkUserRegistered()
        && request.auth.token.write
        && (request.auth.token.manageUsers 
          || request.auth.token.manageAllowedUsers
          || /databases/(default)/documents/Services/$(_service)
            in firestore.get(/databases/(default)/documents/UsersData/$(request.auth.token.personId)).data.AdminServices
        );

      allow read: if checkUserRegistered();
    }

    match /ClassesPhotos {
      match /{class} {
        function canAccessClass() {
          return request.auth.token.superAccess
            || request.auth.uid in firestore.get(/databases/(default)/documents/Classes/$(class)).data.Allowed;
        }

        allow read: if checkUserRegistered()
          && canAccessClass();

        allow delete: if checkUserRegistered()
          && canAccessClass()
          && request.auth.token.write;

        allow update: if checkUserRegistered()
          && canAccessClass()
          && request.auth.token.write;

        allow create: if checkUserRegistered()
          && (request.auth.token.manageUsers
            || request.auth.token.manageAllowedUsers
            || request.auth.uid in firestore.get(/databases/(default)/documents/Classes/$(class)).data.Allowed
          )
          && request.auth.token.write;
      }
    }

    match /PersonsPhotos {

      match /{person} {
        function canAccessPerson() {
          let docData = firestore.get(/databases/(default)/documents/Persons/$(person)).data;

          return request.auth.token.superAccess
            || (!docData.keys().hasAny(['ClassId'])
                ? false
                : request.auth.uid in firestore.get(/databases/(default)/documents/Classes/$(docData.ClassId[4])).data.Allowed 
              )
            || (!docData.keys().hasAny(['Services'])
                ? false
                : docData.Services
                  .hasAny(firestore.get(/databases/(default)/documents/UsersData/$(request.auth.token.personId))
                    .data
                    .AdminServices
                  )
            );
        }

        function canUpdatePerson() {
          let docData = firestore.get(/databases/(default)/documents/Persons/$(person)).data;

          return canAccessPerson()
            && (request.auth.token.superAccess
            || ((!docData.keys().hasAny(['ClassId'])
                  || docData.ClassId == null
                )
              && firestore.get(/databases/(default)/documents/UsersData/$(request.auth.token.personId))
                  .data
                  .AdminServices
                  .hasAll(docData.Services)
              )
            || request.auth.uid in firestore.get(/databases/(default)/documents/Classes/$(docData.ClassId[4])).data.Allowed
          );
        }

        allow read: if checkUserRegistered()
          && canAccessPerson();

        allow delete: if checkUserRegistered()
          && request.auth.token.write
          && canAccessPerson();

        allow create, update: if checkUserRegistered()
          && request.auth.token.write
          && canUpdatePerson();
      }
    }

    match /UsersPhotos/{user} {
      allow read: if request.auth.uid != null
        && (user == request.auth.uid
          || (checkUserRegistered()
            && (
              request.auth.token.manageUsers
              || request.auth.token.secretary
              || (
                request.auth.token.manageAllowedUsers
                && request.auth.uid in firestore.get(/databases/(default)/documents/UsersData/$(user)).data.AllowedUsers
              )
            )
            && request.auth.token.approved
          )
        );

      allow write: if checkUserRegistered()
        && (request.auth.token.manageUsers
          || request.auth.token.manageAllowedUsers
          || user == request.auth.uid
        );
    }

    match /Deleted {
      allow list: if checkUserRegistered()
        && request.auth.token.manageDeleted == true;

      match /{date} {
        allow read: if checkUserRegistered()
          && request.auth.token.manageDeleted == true;
        
        match /Classes {
          match /{class}{  
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && (request.auth.token.superAccess
                  || request.auth.uid in firestore.get(/databases/(default)/documents/Deleted/$(date)/Classes/$(class)).data.Allowed);
          }
        }

        match /Services {
          allow list: if checkUserRegistered()
            && request.auth.token.superAccess
            && request.auth.token.manageDeleted == true;
          
          match /{_service}{  
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && request.auth.token.superAccess;
          }
        }

        match /Persons {
          allow list: if checkUserRegistered()
            && request.auth.token.superAccess
            && request.auth.token.manageDeleted == true;
          
          match /{person}{
            allow read: if checkUserRegistered()
              && request.auth.token.manageDeleted == true
              && (request.auth.token.superAccess
                || request.auth.uid in firestore.get(/databases/(default)/documents/Classes/$(firestore.get(/databases/(default)/documents/Deleted/$(date)/Persons/$(person)).data.ClassId[4])).data.Allowed
              );
          }
        }
      }
    }

    match /Exports/{any=**} {
      allow read: if checkUserRegistered() && resource.metadata.createdBy == request.auth.uid;
    }

    match /Imports/{any=**} {
      allow create: if checkUserRegistered() && resource.metadata.createdBy == request.auth.uid;
    }
  }
}

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}
dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'com.AndroidQuartz.meetinghelper'

    compileSdkVersion 36
    buildToolsVersion '34.0.0'
    ndkVersion "27.0.12077973"


    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.AndroidQuartz.meetinghelper"
        targetSdkVersion 35
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            def releaseKey = new Properties()
            def keystorePropertiesFile = rootProject.file('releaseKey.properties')
            if (keystorePropertiesFile.exists()) {
                releaseKey.load(new FileInputStream(keystorePropertiesFile))
            }

            keyAlias releaseKey['keyAlias']
            keyPassword releaseKey['keyPassword']
            storeFile releaseKey['storeFile'] ? file(releaseKey['storeFile']) : null
            storePassword releaseKey['storePassword']
        }
        debug {
            def debugKey = new Properties()
            def dKeystorePropertiesFile = rootProject.file('debugKey.properties')
            if (dKeystorePropertiesFile.exists()) {
                debugKey.load(new FileInputStream(dKeystorePropertiesFile))
            }

            keyAlias debugKey['keyAlias']
            keyPassword debugKey['keyPassword']
            storeFile debugKey['storeFile'] ? file(debugKey['storeFile']) : null
            storePassword debugKey['storePassword']
        }
    }
    buildTypes {
        debug{
            signingConfig signingConfigs.debug
        }
        profile{
            signingConfig signingConfigs.debug
            minifyEnabled true
            shrinkResources true
        }
        release {
            defaultConfig.minSdkVersion 24
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source '../..'
}

name: Build and Release app

on: [push, workflow_dispatch]

jobs:
  release-app:
    permissions:
      contents: write

    runs-on: ubuntu-latest
    if: github.actor == github.repository_owner && (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[ci release]'))

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get Flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          pub-cache-key: "flutter-pub-:os:-:channel:-:version:-:arch:"
          cache-key: "flutter-:os:-:channel:-:version:-:arch:"
          channel: "stable"

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          cache: "gradle"
          distribution: "corretto"
          java-version: "17"

      - name: Populate the Flutter tool's cache of binary artifacts
        run: |
          flutter config --disable-analytics
          flutter precache

      - name: Decode and save secrets to files
        env:
          ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
          ANDROID_STRINGS: ${{ secrets.ANDROID_STRINGS }}
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
          ANDROID_KEYSTORE_PROPERTIES: ${{ secrets.ANDROID_KEYSTORE_PROPERTIES }}
          ENCRYPTION_KEYS_DART: ${{ secrets.ENCRYPTION_KEYS_DART }}
          SECRETS_DART: ${{ secrets.SECRETS_DART }}
        run: |
          echo $ANDROID_SIGNING_KEY | base64 -d -i > ./android/app/rKey.keystore
          echo $ANDROID_STRINGS | base64 -d -i > ./android/app/src/main/res/values/strings.xml
          echo $GOOGLE_SERVICES_JSON | base64 -d -i > ./android/app/google-services.json
          echo $ANDROID_KEYSTORE_PROPERTIES | base64 -d -i > ./android/releaseKey.properties
          echo $ENCRYPTION_KEYS_DART | base64 -d -i > ./lib/utils/encryption_keys.dart
          echo $SECRETS_DART | base64 -d -i > ./lib/secrets.dart

      - name: Install dependencies
        run: flutter pub get

      - name: Run new builder
        if: ${{ steps.dart_tool_cache.outputs.cache-hit != 'true' }}
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run cached builder
        if: ${{ steps.dart_tool_cache.outputs.cache-hit == 'true' }}
        run: dart run build_runner build

      - name: Build apk
        run: flutter build apk

      - name: Get version from pubspec.yaml
        id: version
        run: |
          version=$(grep -m 1 'version:' pubspec.yaml | awk '{print $2}' | awk -F "+" '{print $1}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Add version to APK filename
        id: apk_filename
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/MeetingHelper-v${{ steps.version.outputs.version }}.apk
          echo "value=MeetingHelper-v${{ steps.version.outputs.version }}.apk" >> $GITHUB_OUTPUT

      - name: Get previous version
        id: previous_version
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          previous_tag=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" $(git rev-list --tags --skip=1 --max-count=1))
          echo "version=${previous_tag#v}" >> $GITHUB_OUTPUT

      - name: Render Release Template
        env:
          NEW_VERSION: ${{ steps.version.outputs.version }}
          NEW_TAG: v${{ steps.version.outputs.version }}
          OLD_TAG: v${{ steps.previous_version.outputs.version }}
          DOWNLOAD_LINK: ${{github.server_url}}/${{github.repository}}/releases/download/v${{ steps.version.outputs.version }}/${{ steps.apk_filename.outputs.value }}.apk
        run: envsubst < ./.github/workflows/release-template.md > release-body.md

      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/${{ steps.apk_filename.outputs.value }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ steps.version.outputs.version }}
          bodyFile: release-body.md

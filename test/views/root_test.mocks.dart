// Mocks generated by Mockito 5.2.0 from annotations
// in meetinghelper/test/views/root_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:firebase_database/firebase_database.dart' as _i6;
import 'package:meetinghelper/models.dart' as _i3;
import 'package:meetinghelper/repositories.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/rxdart.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeBehaviorSubject_0<T> extends _i1.Fake
    implements _i2.BehaviorSubject<T> {}

class _FakeValueStream_1<T> extends _i1.Fake implements _i2.ValueStream<T> {}

class _FakeMHPermissionsSet_2 extends _i1.Fake implements _i3.MHPermissionsSet {
}

class _FakeUser_3 extends _i1.Fake implements _i3.User {}

/// A class which mocks [MHAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMHAuthRepository extends _i1.Mock implements _i4.MHAuthRepository {
  MockMHAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BehaviorSubject<_i3.User?> get userSubject =>
      (super.noSuchMethod(Invocation.getter(#userSubject),
              returnValue: _FakeBehaviorSubject_0<_i3.User?>())
          as _i2.BehaviorSubject<_i3.User?>);
  @override
  _i2.BehaviorSubject<_i3.Person?> get userDataSubject =>
      (super.noSuchMethod(Invocation.getter(#userDataSubject),
              returnValue: _FakeBehaviorSubject_0<_i3.Person?>())
          as _i2.BehaviorSubject<_i3.Person?>);
  @override
  set userTokenListener(
          _i5.StreamSubscription<_i6.DatabaseEvent>? _userTokenListener) =>
      super.noSuchMethod(
          Invocation.setter(#userTokenListener, _userTokenListener),
          returnValueForMissingStub: null);
  @override
  set connectionListener(
          _i5.StreamSubscription<_i6.DatabaseEvent>? _connectionListener) =>
      super.noSuchMethod(
          Invocation.setter(#connectionListener, _connectionListener),
          returnValueForMissingStub: null);
  @override
  set personListener(_i5.StreamSubscription<_i3.Person>? _personListener) =>
      super.noSuchMethod(Invocation.setter(#personListener, _personListener),
          returnValueForMissingStub: null);
  @override
  set authListener(_i5.StreamSubscription<_i7.User?>? _authListener) =>
      super.noSuchMethod(Invocation.setter(#authListener, _authListener),
          returnValueForMissingStub: null);
  @override
  _i2.ValueStream<_i3.User?> get userStream =>
      (super.noSuchMethod(Invocation.getter(#userStream),
              returnValue: _FakeValueStream_1<_i3.User?>())
          as _i2.ValueStream<_i3.User?>);
  @override
  bool get isSignedIn =>
      (super.noSuchMethod(Invocation.getter(#isSignedIn), returnValue: false)
          as bool);
  @override
  _i2.ValueStream<_i3.Person?> get userDataStream =>
      (super.noSuchMethod(Invocation.getter(#userDataStream),
              returnValue: _FakeValueStream_1<_i3.Person?>())
          as _i2.ValueStream<_i3.Person?>);
  @override
  bool connectionChanged(_i6.DatabaseEvent? snapshot) =>
      (super.noSuchMethod(Invocation.method(#connectionChanged, [snapshot]),
          returnValue: false) as bool);
  @override
  _i3.MHPermissionsSet permissionsFromIdToken(
          Map<String, dynamic>? idTokenClaims) =>
      (super.noSuchMethod(
          Invocation.method(#permissionsFromIdToken, [idTokenClaims]),
          returnValue: _FakeMHPermissionsSet_2()) as _i3.MHPermissionsSet);
  @override
  _i5.Future<_i3.User> refreshFromIdToken(Map<String, dynamic>? idTokenClaims,
          {_i7.User? firebaseUser,
          String? uid,
          String? name,
          String? email,
          String? phone}) =>
      (super.noSuchMethod(
              Invocation.method(#refreshFromIdToken, [
                idTokenClaims
              ], {
                #firebaseUser: firebaseUser,
                #uid: uid,
                #name: name,
                #email: email,
                #phone: phone
              }),
              returnValue: Future<_i3.User>.value(_FakeUser_3()))
          as _i5.Future<_i3.User>);
  @override
  _i5.Future<void> refreshSupabaseToken([String? supabaseToken]) => (super
      .noSuchMethod(Invocation.method(#refreshSupabaseToken, [supabaseToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void initListeners() =>
      super.noSuchMethod(Invocation.method(#initListeners, []),
          returnValueForMissingStub: null);
  @override
  void onUserChanged(_i7.User? user) =>
      super.noSuchMethod(Invocation.method(#onUserChanged, [user]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> refreshIdToken(_i7.User? firebaseUser,
          [bool? force = false]) =>
      (super.noSuchMethod(
          Invocation.method(#refreshIdToken, [firebaseUser, force]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void refreshFromDoc(_i3.Person? userData) =>
      super.noSuchMethod(Invocation.method(#refreshFromDoc, [userData]),
          returnValueForMissingStub: null);
  @override
  void scheduleOnDisconnect() =>
      super.noSuchMethod(Invocation.method(#scheduleOnDisconnect, []),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> recordActive() =>
      (super.noSuchMethod(Invocation.method(#recordActive, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> recordLastSeen() =>
      (super.noSuchMethod(Invocation.method(#recordLastSeen, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
